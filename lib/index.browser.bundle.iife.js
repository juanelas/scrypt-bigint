var scryptBigint=function(e){"use strict";function t(e,t){for(let n=0;n<e.length;n++)e[n]^=t[n]}function n(e,t,n,r){return"string"==typeof e?e=(new TextEncoder).encode(e):ArrayBuffer.isView(e)||(e=new Uint8Array(e)),"string"==typeof t?t=(new TextEncoder).encode(t):ArrayBuffer.isView(t)||(t=new Uint8Array(t)),new Promise((i,o)=>{crypto.subtle.importKey("raw",e,"PBKDF2",!1,["deriveBits"]).then(e=>{const c={name:"PBKDF2",hash:"SHA-256",salt:t,iterations:n};crypto.subtle.deriveBits(c,e,8*r).then(e=>i(e),e=>o(e))},e=>o(e))})}function r(e){function t(e,t){return e<<t|e>>>32-t}const n=e.slice(0);for(let e=8;e>0;e-=2)n[4]^=t(n[0]+n[12],7),n[8]^=t(n[4]+n[0],9),n[12]^=t(n[8]+n[4],13),n[0]^=t(n[12]+n[8],18),n[9]^=t(n[5]+n[1],7),n[13]^=t(n[9]+n[5],9),n[1]^=t(n[13]+n[9],13),n[5]^=t(n[1]+n[13],18),n[14]^=t(n[10]+n[6],7),n[2]^=t(n[14]+n[10],9),n[6]^=t(n[2]+n[14],13),n[10]^=t(n[6]+n[2],18),n[3]^=t(n[15]+n[11],7),n[7]^=t(n[3]+n[15],9),n[11]^=t(n[7]+n[3],13),n[15]^=t(n[11]+n[7],18),n[1]^=t(n[0]+n[3],7),n[2]^=t(n[1]+n[0],9),n[3]^=t(n[2]+n[1],13),n[0]^=t(n[3]+n[2],18),n[6]^=t(n[5]+n[4],7),n[7]^=t(n[6]+n[5],9),n[4]^=t(n[7]+n[6],13),n[5]^=t(n[4]+n[7],18),n[11]^=t(n[10]+n[9],7),n[8]^=t(n[11]+n[10],9),n[9]^=t(n[8]+n[11],13),n[10]^=t(n[9]+n[8],18),n[12]^=t(n[15]+n[14],7),n[13]^=t(n[12]+n[15],9),n[14]^=t(n[13]+n[12],13),n[15]^=t(n[14]+n[13],18);for(let t=0;t<16;++t)e[t]=n[t]+e[t]}function i(e){const n=e.byteLength/128,i=8*(2*n-1),o=e.slice(i,i+8),c=new BigUint64Array(e.length);let s=!1;for(let i=0;i<2*n;i++){const f=8*i;t(o,e.subarray(f,f+8)),r(new Uint32Array(o.buffer));let a=i>>1;s&&(a+=n);for(let e=0;e<8;e++)c[8*a+e]=o[e];s=!s}return c}function o(e,n){const r=e.byteLength/128;let o=e;const c=new Array(n);for(let e=0;e<n;e++)c[e]=o.slice(0),o=i(o);const s=BigInt(n);function f(e){const t=64*(2*r-1);return new DataView(e.buffer,t,64).getBigUint64(0,!0)%s}for(let e=0;e<n;e++){t(o,c[f(o)]),o=i(o)}return o}return e.pbkdf2HmacSha256=n,e.salsa208Core=r,e.scrypt=async function(e,t,r,i,c,s){"string"==typeof e?e=(new TextEncoder).encode(e):ArrayBuffer.isView(e)||(e=new Uint8Array(e)),"string"==typeof t?t=(new TextEncoder).encode(t):ArrayBuffer.isView(t)||(t=new Uint8Array(t));const f=await n(e,t,1,128*c*i),a=new BigUint64Array(f);for(let e=0;e<c;e++){const t=16*i,n=e*t;let c=a.slice(n,n+t);c=o(c,r);for(let e=0;e<16*i;e++)a[n+e]=c[e]}return await n(e,a,1,s)},e.scryptBlockMix=i,e.scryptROMix=o,e}({});
