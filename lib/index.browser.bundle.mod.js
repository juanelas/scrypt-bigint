function e(e,t){for(let n=0;n<e.length;n++)e[n]^=t[n]}function t(e,t,n,r){return"string"==typeof e?e=(new TextEncoder).encode(e):ArrayBuffer.isView(e)||(e=new Uint8Array(e)),"string"==typeof t?t=(new TextEncoder).encode(t):ArrayBuffer.isView(t)||(t=new Uint8Array(t)),new Promise((i,o)=>{crypto.subtle.importKey("raw",e,"PBKDF2",!1,["deriveBits"]).then(e=>{const c={name:"PBKDF2",hash:"SHA-256",salt:t,iterations:n};crypto.subtle.deriveBits(c,e,8*r).then(e=>i(e),e=>o(e))},e=>o(e))})}function n(e){function t(e,t){return e<<t|e>>>32-t}const n=e.slice(0);for(let e=8;e>0;e-=2)n[4]^=t(n[0]+n[12],7),n[8]^=t(n[4]+n[0],9),n[12]^=t(n[8]+n[4],13),n[0]^=t(n[12]+n[8],18),n[9]^=t(n[5]+n[1],7),n[13]^=t(n[9]+n[5],9),n[1]^=t(n[13]+n[9],13),n[5]^=t(n[1]+n[13],18),n[14]^=t(n[10]+n[6],7),n[2]^=t(n[14]+n[10],9),n[6]^=t(n[2]+n[14],13),n[10]^=t(n[6]+n[2],18),n[3]^=t(n[15]+n[11],7),n[7]^=t(n[3]+n[15],9),n[11]^=t(n[7]+n[3],13),n[15]^=t(n[11]+n[7],18),n[1]^=t(n[0]+n[3],7),n[2]^=t(n[1]+n[0],9),n[3]^=t(n[2]+n[1],13),n[0]^=t(n[3]+n[2],18),n[6]^=t(n[5]+n[4],7),n[7]^=t(n[6]+n[5],9),n[4]^=t(n[7]+n[6],13),n[5]^=t(n[4]+n[7],18),n[11]^=t(n[10]+n[9],7),n[8]^=t(n[11]+n[10],9),n[9]^=t(n[8]+n[11],13),n[10]^=t(n[9]+n[8],18),n[12]^=t(n[15]+n[14],7),n[13]^=t(n[12]+n[15],9),n[14]^=t(n[13]+n[12],13),n[15]^=t(n[14]+n[13],18);for(let t=0;t<16;++t)e[t]=n[t]+e[t]}function r(t){const r=t.byteLength/128,i=8*(2*r-1),o=t.slice(i,i+8),c=new BigUint64Array(t.length);let f=!1;for(let i=0;i<2*r;i++){const s=8*i;e(o,t.subarray(s,s+8)),n(new Uint32Array(o.buffer));let a=i>>1;f&&(a+=r);for(let e=0;e<8;e++)c[8*a+e]=o[e];f=!f}return c}function i(t,n){const i=t.byteLength/128;let o=t;const c=new Array(n);for(let e=0;e<n;e++)c[e]=o.slice(0),o=r(o);const f=BigInt(n);function s(e){const t=64*(2*i-1);return new DataView(e.buffer,t,64).getBigUint64(0,!0)%f}for(let t=0;t<n;t++){e(o,c[s(o)]),o=r(o)}return o}async function o(e,n,r,o,c,f){"string"==typeof e?e=(new TextEncoder).encode(e):ArrayBuffer.isView(e)||(e=new Uint8Array(e)),"string"==typeof n?n=(new TextEncoder).encode(n):ArrayBuffer.isView(n)||(n=new Uint8Array(n));const s=await t(e,n,1,128*c*o),a=new BigUint64Array(s);for(let e=0;e<c;e++){const t=16*o,n=e*t;let c=a.slice(n,n+t);c=i(c,r);for(let e=0;e<16*o;e++)a[n+e]=c[e]}return await t(e,a,1,f)}export{t as pbkdf2HmacSha256,n as salsa208Core,o as scrypt,r as scryptBlockMix,i as scryptROMix};
